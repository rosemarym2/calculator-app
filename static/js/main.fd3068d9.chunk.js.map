{"version":3,"sources":["App.js","index.js"],"names":["App","useState","calculator","setCalulator","output","setOutput","currentCalc","value","evaluate","clear","className","onClick","slice","digits","i","push","createDigits","ReactDOM","render","document","getElementById"],"mappings":"sQAgFeA,EA5EJ,WACT,MAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAIIC,EAAc,SAACC,GACN,MAAVA,EACFJ,EAAaK,YAASN,IACJ,OAAVK,EACR,4BAIAJ,EAAaD,EAAaK,IA4BvBE,EAAQ,WACbJ,EAAU,IACVF,EAAa,KAGZ,OACE,qBAAKO,UAAU,aAAf,SACE,8CACA,qBAAKA,UAAW,mBAChB,sBAAKA,UAAW,gBAAhB,UACCN,EAAS,uBAAMM,UAAU,SAAhB,cAA2BN,EAA3B,OAA6C,GACrDF,GAAc,OAEhB,sBAAKQ,UAAU,YAAf,UACA,wBAAQC,QAAUF,EAAlB,gBACA,wBAAQE,QA1BI,WAChB,GAAkB,IAAdT,EAAJ,CAIA,IAAIK,EAAQL,EAAWU,MAAM,GAAI,GAEjCT,EAAaI,GACbF,EAAUE,KAkBN,iBACA,wBAAQI,QAAU,kBAAML,EAAa,MAArC,kBACA,wBAAQK,QAAU,kBAAML,EAAa,MAArC,eACA,wBAAQK,QAAU,kBAAML,EAAa,MAArC,eACA,wBAAQK,QAAU,kBAAML,EAAa,MAArC,kBAEA,qBAAKI,UAAU,SAAf,SA7Ce,WAGnB,IAFA,IAAMG,EAAS,GADS,WAGfC,GACPD,EAAOE,KAAK,wBAAQJ,QAAU,kBAAML,EAAaQ,IAArC,SAAoDA,GAAJA,KADrDA,EAAI,EAAGA,EAAI,GAAIA,IAAK,EAApBA,GAIX,OAAOD,EAuCCG,KAEF,sBAAKN,UAAY,WAAjB,UACA,wBAAQC,QAAU,kBAAML,EAAa,MAArC,eACA,wBAAQK,QAAU,kBAAML,EAAa,MAArC,eACA,wBAAQK,QA1CG,WACfR,EAAaK,YAASN,KAyClB,wBCpENe,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.fd3068d9.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport { evaluate } from \"mathjs\"\n\nconst App =() => {\n  const [calculator, setCalulator] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n\nconst ops = ['/', '*', '+', '-', '.'];\n\nconst currentCalc = (value) => {\n if (value === '='){\n   setCalulator(evaluate(calculator))\n }else if (value === 'AC'){\n   setCalulator = {clear} \n }else if (NaN){\n  setCalulator ('')\n}else{\n   setCalulator(calculator + value);\n }\n}\n\nconst createDigits = () =>{\n  const digits = [];\n  \n  for (let i = 1; i < 10; i++){\n    digits.push(<button onClick ={() => currentCalc (i)} key = {i}>{i}</button>)\n  } \n\nreturn digits;\n}\nconst equation = () => {\n  setCalulator(evaluate(calculator));\n}\n\nconst backSpace = () =>{\n  if (calculator == ''){\n    return;\n  }\n\n  let value = calculator.slice(0, -1);\n\n  setCalulator(value);\n  setOutput(value);\n}\n\nconst clear = () =>{\n setOutput(\"\")\n setCalulator(\"\")\n}\n\n  return (\n    <div className=\"calculator\">\n      <body>Calculator\n      <div className= \"previous-input\"></div>\n      <div className= \"current-input\">\n      {output ? <span className=\"output\">({output})</span> : \"\" }\n      { calculator || \"0\" }\n      </div>\n      <div className=\"operators\">\n      <button onClick ={clear}>AC</button>\n      <button onClick ={backSpace}>Del</button>\n      <button onClick ={() => currentCalc ('/')}>รท</button>\n      <button onClick ={() => currentCalc ('*')}>*</button>\n      <button onClick ={() => currentCalc ('+')}>+</button>\n      <button onClick ={() => currentCalc ('-')}>-</button>\n      </div>\n      <div className=\"digits\">\n      { createDigits () }\n      </div>\n      <div className = \"equation\">\n      <button onClick ={() => currentCalc ('0')}>0</button>\n      <button onClick ={() => currentCalc ('.')}>.</button>\n      <button onClick ={equation}>=</button>\n      </div>\n      </body> \n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}